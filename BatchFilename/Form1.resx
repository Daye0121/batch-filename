<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RU5ErkJggg==
</value>
  </data>
</root>